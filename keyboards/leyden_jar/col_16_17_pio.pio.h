// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// col_16_17_pio //
// ------------- //

#define col_16_17_pio_wrap_target 0
#define col_16_17_pio_wrap 9

static const uint16_t col_16_17_pio_program_instructions[] = {
            //     .wrap_target
    0x20c1, //  0: wait   1 irq, 1
    0xe021, //  1: set    x, 1
    0x6802, //  2: out    pins, 2                [8]
    0x5b08, //  3: in     pins, 8                [27]
    0xbf42, //  4: nop                           [31]
    0xbf42, //  5: nop                           [31]
    0x7f02, //  6: out    pins, 2                [31]
    0xec47, //  7: set    y, 7                   [12]
    0x1f88, //  8: jmp    y--, 8                 [31]
    0x0042, //  9: jmp    x--, 2
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program col_16_17_pio_program = {
    .instructions = col_16_17_pio_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config col_16_17_pio_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + col_16_17_pio_wrap_target, offset + col_16_17_pio_wrap);
    return c;
}

static inline void col_16_17_pio_init(PIO pio, uint sm, uint offset, uint inPin, uint outPin) {
    pio_sm_config c = col_16_17_pio_program_get_default_config(offset);
    // Out pins configuration
    sm_config_set_out_pins(&c, outPin, 2);
    for (uint i=0; i<2; i++)
        pio_gpio_init(pio, outPin + i);
    // In pins configuration
    sm_config_set_in_pins(&c, inPin);
    for (uint i=0; i<8; i++)
        pio_gpio_init(pio, inPin + i);
    // Each clock tick will be appromimately 0.1us
    float div = ((float)clock_get_hz(clk_sys)) / (10.f*1000.f*1000.f);
    sm_config_set_clkdiv(&c, div);
    // Initializes TX/RX fifos
    sm_config_set_out_shift(&c, true, true, 8);
    sm_config_set_in_shift(&c, true, true, 16);
    pio_sm_set_consecutive_pindirs(pio, sm, outPin, 2, true);
    // Clear IRQ flag before starting, and make sure flag doesn't actually
    // assert a system-level interrupt (we're using it as a status flag)
    // Init and start the state machine
    pio_sm_init(pio, sm, offset, &c);
}

#endif

